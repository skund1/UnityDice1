package kr.ac.kookmin.cs.distboard;

import kr.ac.kookmin.cs.distboard.activity.ModeSelectionActivity;
import kr.ac.kookmin.cs.distboard.controller.ParticipantAdapter;
import kr.ac.kookmin.cs.distboard.controller.ParticipantListener;
import kr.ac.kookmin.cs.distboard.enumeration.Mode;
import kr.ac.kookmin.cs.distboard.subobject.DicePlusGameTool;
import kr.ac.kookmin.cs.distboard.subobject.YutGameTool;
import kr.ac.kookmin.cs.distboard.system.BluetoothManager;
import kr.ac.kookmin.cs.distboard.system.DicePlusManager;
import kr.ac.kookmin.cs.distboard.system.SubjectDeviceMapper;
import android.bluetooth.BluetoothDevice;
import android.content.Context;
import android.content.Intent;
import android.util.Log;

public class Mediator{
	
	public static String TAG = "20083271:Mediator";
	
	private static Mediator instance = new Mediator(); 
	
	private static final int DEFAULT_HOST_PREPARE_TIMEOUT = 120;
	private static final int DEFAULT_HOST_WAIT_TIMEOUT = 30;
	private static ParticipantListener participantListener = new ParticipantAdapter();
	
	public int hostPrepareTimeout = DEFAULT_HOST_PREPARE_TIMEOUT;
	public int hostWaitPlayerTimeout = DEFAULT_HOST_WAIT_TIMEOUT;
	
	private boolean initialized = false;
	private Mode mode = Mode.NONE;
	private int minPlayers;
	private int maxPlayers;
	private int exactElectricGameToolDicePlus;
	private int exactElectricGameToolYut;
	
	private BluetoothManager bluetoothManager = null;
	private DicePlusManager dicePlusManager = null; 
	
	private Mediator(){
		
	}
	
	public static Mediator getInstance(//초기화하면서 인스턴스를 얻습니다.(최초 1회)
			int minPlayers, 
			int maxPlayers, 
			int exactElectricGameToolDicePlus,
			int exactElectricGameToolYut){
		
		//초기화되지 않았다면
		
		instance.mode = Mode.NONE;//싱글톤 스태틱 조심용
		instance.hostPrepareTimeout = DEFAULT_HOST_PREPARE_TIMEOUT;//싱글톤 스태틱 조심용
		instance.hostWaitPlayerTimeout = DEFAULT_HOST_WAIT_TIMEOUT;//싱글톤 스태틱 조심용
		instance.minPlayers = minPlayers;
		instance.maxPlayers = maxPlayers;
		instance.exactElectricGameToolDicePlus = exactElectricGameToolDicePlus;
		instance.exactElectricGameToolYut = exactElectricGameToolYut;
			
		instance.initialized = true;
		
		return instance;
	}
	
	public static Mediator getInstance(){
		if(instance.initialized == true)
			return instance;
		else{
			Log.e(TAG, "is not initailized.");
			return null;//에러처리할것
		}
	}
	
	//싱글톤용 메서드
	
	public void negotiate(){
		//현재 설정된 시간제한으로 재협상
		negotiate(hostPrepareTimeout);
	}
	
	public void negotiate(int hostPrepareTimeout){
		Log.i(TAG, "negotiate");
		Intent intent = getDefaultIntent();
		intent.putExtra(ModeSelectionActivity.ACTIVITY_MODE, ModeSelectionActivity.HOST_CLIENT_SELECT_MODE);
		activateActivityAs(intent);
		
	}
	
	//called by Activity
	
	private void prepare(){
		Log.d(TAG, "호스트 준비 입장");
		
		//블루투스 매니저 접근
		BluetoothManager.getInstance(Mode.HOST).establish(maxPlayers, exactElectricGameToolYut, hostPrepareTimeout);
		
		//다이스 플러스 매니저 접근
		DicePlusManager.getInstance().establish(exactElectricGameToolDicePlus, hostPrepareTimeout);
		
		//액티비티 생성
		/*Intent intent = getDefaultIntent();
		intent.putExtra(ModeSelectionActivity.ACTIVITY_MODE, ModeSelectionActivity.HOST_PREPARE_MODE);
		intent.putExtra(ModeSelectionActivity.MAX_PLAYERS, maxPlayers);
		intent.putExtra(ModeSelectionActivity.EXACT_YUTS, exactElectricGameToolYut);
		intent.putExtra(ModeSelectionActivity.EXACT_DICEPLUSES, exactElectricGameToolDicePlus);
		activateActivityAs(intent);*/
		
	}
	
	private void join(){
		Log.d(TAG, "클라이언트 합류 입장");
		
		
		//블루투스 매니저 접근
		BluetoothDevice[] devices = BluetoothManager.getInstance(Mode.CLIENT).getDiscoveredDevices();
		
		
		//액티비티 생성
		/*Intent intent = getDefaultIntent();
		intent.putExtra(ModeSelectionActivity.ACTIVITY_MODE, ModeSelectionActivity.CLIENT_JOIN_MODE);
		intent.putExtra(ModeSelectionActivity.DISCOVERED_DEVICES, devices);
		activateActivityAs(intent);*///액티비티가 연결 코드 호출
		
	}
	
	//system default
	public void wait(Player<?> player, boolean onUI){
		//UI
	}
	
	//system default
	public void wait(GameTool gameTool, boolean onUI){
		//UI
	}
	
	public void leave(){
		
	}
	
	public void getOut(Player<?> player){
		
	}
	
	public static void registerParticipantListener(ParticipantListener participantListener){
		Mediator.participantListener = participantListener;
	}

	//called by bluetooth manager
	
	public void setMode(Mode mode){
		//인자로 온 모드가 부적절하거나 기존에 모드가 있다면 에러.
		if(this.mode == Mode.NONE && mode != Mode.NONE)
			this.mode = mode;
		else
			Log.e(TAG, "Unexpected mode");
	}
	
	public Mode getMode(){
		return this.mode;
	}
	
	public void setHostPrepareTimeout(int hostPrepareTimeout){
		this.hostPrepareTimeout = hostPrepareTimeout;
	}
	
	public void setHostWaitPlayerTimeout(int hostWaitPlayerTimeout){
		this.hostWaitPlayerTimeout = hostWaitPlayerTimeout;
	}
	
	
	//called by Activity
	
	public void completeSelectHostClient(Mode mode){
		this.mode = mode;
		Log.i(TAG, "mode selected : " + mode);
		
		//모드 선택 액티비티에 의해 선택된 모드의 협상을 진행합니다.
		if(mode == Mode.HOST){
			prepare();
		}else if(mode == Mode.CLIENT){
			join();
		}else{
			Log.e(TAG, "mode was not selected.");
		}
		
	}
	
	
	//called by mapper
	
	public void completeMapping(Player[] players, YutGameTool[] yutGameTools, DicePlusGameTool[] dicePlusGameTools){
		//보드게임의 구성요소 설정
		Log.i(TAG, "맵핑 완료");
		
		DistributedBoardgame.getInstance().setPlayer(players);
		DistributedBoardgame.getInstance().setYutGameTools(yutGameTools);
		DistributedBoardgame.getInstance().setDicePlusGameTools(dicePlusGameTools);
	}

	
	
	//helper method
	
	private Intent getDefaultIntent(){
		return new Intent(
				DistributedBoardgame.getInstance().getContext(), 
				kr.ac.kookmin.cs.distboard.activity.ModeSelectionActivity.class);
	}
	
	private void activateActivityAs(Intent intent){
		//액티비티 활성화
		DistributedBoardgame.getInstance().getContext().startActivity(intent);
	}

	
	
	//static method
	
	public static ParticipantListener getParticipantListener(){
		return Mediator.participantListener;
	}
	
	
	
	
}
